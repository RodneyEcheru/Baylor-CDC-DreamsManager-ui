---

---

<div class="cursor cursor--large"></div>
<div class="cursor cursor--small"></div>

<script  is:global data-astro-rerun>
    // Get the circle and dot elements from the DOM
    /*
    const circle = document.getElementById('circle');
    const dot = document.getElementById('dot');

    // Variables to track the mouse movement state and positions
    let isMoving = false; // Flag to track if the mouse is moving or not
    let lastMouseX = 0; // Last known mouse X position
    let lastMouseY = 0; // Last known mouse Y position
    let dotX = 0; // Current dot X position
    let dotY = 0; // Current dot Y position
    let circleX = 0; // Current circle X position
    let circleY = 0; // Current circle Y position
    let targetDotX = 0; // Target dot X position when the mouse is moving
    let targetDotY = 0; // Target dot Y position when the mouse is moving

    // Event listener for mouse movement
    document.addEventListener('mousemove', (event) => {
        const { clientX, clientY } = event; // Get the current cursor position

        // If the mouse is not moving
        if (!isMoving) {
            isMoving = true; // Set the isMoving flag to true
            lastMouseX = clientX; // Update the last known mouse X position
            lastMouseY = clientY; // Update the last known mouse Y position
            circleX = clientX - 24; // Set the initial circle X position (offset by 24 pixels)
            circleY = clientY - 24; // Set the initial circle Y position (offset by 24 pixels)
            dotX = clientX - 8; // Set the initial dot X position (offset by 8 pixels)
            dotY = clientY - 8; // Set the initial dot Y position (offset by 8 pixels)
            targetDotX = clientX - 8; // Set the initial target dot X position (offset by 8 pixels)
            targetDotY = clientY - 8; // Set the initial target dot Y position (offset by 8 pixels)
        }

        // Calculate the distance between the current and last known mouse positions
        const dx = clientX - lastMouseX;
        const dy = clientY - lastMouseY;
        const distance = Math.sqrt(dx * dx + dy * dy);

        // If the mouse has moved more than 5 pixels
        if (distance > 5) {
            lastMouseX = clientX; // Update the last known mouse X position
            lastMouseY = clientY; // Update the last known mouse Y position
            circleX = clientX - 24; // Update the circle X position (offset by 24 pixels)
            circleY = clientY - 24; // Update the circle Y position (offset by 24 pixels)
            targetDotX = clientX - 8; // Update the target dot X position (offset by 8 pixels)
            targetDotY = clientY - 8; // Update the target dot Y position (offset by 8 pixels)
        }

        // Smoothly move the dot towards its target position using linear interpolation
        dotX += (targetDotX - dotX) * 0.2; // Update the dot X position
        dotY += (targetDotY - dotY) * 0.2; // Update the dot Y position

        // Update the styles of the circle and dot elements
        circle.style.left = `${circleX}px`;
        circle.style.top = `${circleY}px`;
        dot.style.left = `${dotX}px`;
        dot.style.top = `${dotY}px`;

        // Request the next animation frame to update the positions
        requestAnimationFrame(updatePosition);
    });

    // Event listener for when the mouse leaves the document
    document.addEventListener('mouseleave', () => {
        isMoving = false; // Set the isMoving flag to false
    });

    // Function to update the positions of the circle and dot
    const updatePosition = () => {
        // If the mouse is not moving
        if (!isMoving) {
            // Center the circle around the dot
            circle.style.left = `${dotX - 8}px`;
            circle.style.top = `${dotY - 8}px`;

            // Smoothly move the dot towards the last known mouse position using linear interpolation
            dotX += (lastMouseX - dotX) * 0.9; // Update the dot X position
            dotY += (lastMouseY - dotY) * 0.9; // Update the dot Y position
        }

        // Request the next animation frame to update the positions
        requestAnimationFrame(updatePosition);
    };

    // Start the animation loop
    requestAnimationFrame(updatePosition);
*/
    // console.clear();

    const { gsap } = window;

    const cursorOuter = document.querySelector(".cursor--large");
    const cursorInner = document.querySelector(".cursor--small");
    let isStuck = false;
    let mouse = {
        x: -100,
        y: -100,
    };

    // Just in case you need to scroll
    let scrollHeight = 0;
    window.addEventListener('scroll', function(e) {
        scrollHeight = window.scrollY
    })

    let cursorOuterOriginalState = {
        width: cursorOuter.getBoundingClientRect().width,
        height: cursorOuter.getBoundingClientRect().height,
    };
    const buttons = document.querySelectorAll("main button");

    buttons.forEach((button) => {
        button.addEventListener("pointerenter", handleMouseEnter);
        button.addEventListener("pointerleave", handleMouseLeave);
    });

    document.body.addEventListener("pointermove", updateCursorPosition);
    document.body.addEventListener("pointerdown", () => {
        gsap.to(cursorInner, 0.15, {
            scale: 2,
        });
    });
    document.body.addEventListener("pointerup", () => {
        gsap.to(cursorInner, 0.15, {
            scale: 1,
        });
    });

    function updateCursorPosition(e) {
        mouse.x = e.pageX;
        mouse.y = e.pageY;
    }

    function updateCursor() {
        gsap.set(cursorInner, {
            x: mouse.x,
            y: mouse.y,
        });

        if (!isStuck) {
            gsap.to(cursorOuter, {
                duration: 0.15,
                x: mouse.x - cursorOuterOriginalState.width/2,
                y: mouse.y - cursorOuterOriginalState.height/2,
            });
        }

        requestAnimationFrame(updateCursor);
    }

    updateCursor();

    function handleMouseEnter(e) {
        isStuck = true;
        const targetBox = e.currentTarget.getBoundingClientRect();
        gsap.to(cursorOuter, 0.2, {
            x: targetBox.left,
            y: targetBox.top + scrollHeight,
            width: targetBox.width,
            height: targetBox.width,
            borderRadius: 0,
            backgroundColor: "rgba(255, 255, 255, 0.1)",
        });
    }

    function handleMouseLeave(e) {
        isStuck = false;
        gsap.to(cursorOuter, 0.2, {
            width: cursorOuterOriginalState.width,
            height: cursorOuterOriginalState.width,
            borderRadius: "50%",
            backgroundColor: "transparent",
        });
    }


    // navbar
    window.addEventListener('scroll', function () {
        const navbar = document.getElementById('navbar');
        if (window.scrollY > 0) {
            navbar.classList.add('bg-white', 'bg-opacity-20', 'backdrop-filter', 'backdrop-blur-lg');
        } else {
            navbar.classList.remove('bg-white', 'bg-opacity-20', 'backdrop-filter', 'backdrop-blur-lg');
        }
    });
</script>


<style is:global>

    body {
        width: 100%;
        height: 100vh;
        cursor: none;
    }

    .cursor {
        width: var(--size);
        height: var(--size);
        border-radius: 50%;
        position: absolute;
        left: 0;
        top: 0;
        pointer-events: none;
        z-index: 100;
    }
    .cursor--large {
        --size: 40px;
        border: 1px solid #025206;
    }
    .cursor--small {
        --size: 10px;
        background: #11460c;
        transform: translate(-50%, -50%);
    }
</style>
